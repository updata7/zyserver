!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AddHandler	.\ServantHandler.cpp	/^void ServantHandler::AddHandler(SERVANT_TYPE servant, ServantBase *servantClass)$/;"	f	class:ServantHandler
BASE	.\net_work.c	/^struct event_base *BASE = NULL;$/;"	v	typeref:struct:event_base
COMMONCLASS_H	.\CommonClass.h	2;"	d
CONF_MAX	.\server_env.c	10;"	d	file:
CallBack	.\ServantBase.cpp	/^void ServantBase::CallBack(std::string msg)$/;"	f	class:ServantBase
CommonClass	.\CommonClass.h	/^	CommonClass()$/;"	f	class:CommonClass
CommonClass	.\CommonClass.h	/^class CommonClass$/;"	c
DELETE	.\Memory.hpp	5;"	d
DeleteInstance	.\CommonClass.h	/^	void DeleteInstance()$/;"	f	class:CommonClass
DispatchMessage	.\MessageDispatch.cpp	/^void MessageDispatch::DispatchMessage(void *userdata)$/;"	f	class:MessageDispatch
E	.\server_env.c	/^static struct server_env E[ENV_MAX];$/;"	v	typeref:struct:server_env	file:
ENDPOINTSERVER_H	.\EndpointServer.hpp	2;"	d
ENV_MAX	.\server_env.c	9;"	d	file:
EndpointServer	.\EndpointServer.cpp	/^EndpointServer::EndpointServer(const char *Address, int Port, int Prefix)$/;"	f	class:EndpointServer
EndpointServer	.\EndpointServer.hpp	/^class EndpointServer$/;"	c
Execute	.\TimerMgr.cpp	/^void *TimerMgr::Execute(void *userdata)$/;"	f	class:TimerMgr
ExecuteHandler	.\ServantHandler.cpp	/^void ServantHandler::ExecuteHandler(SERVANT_TYPE servant)$/;"	f	class:ServantHandler
Free	.\malloc.c	/^void Free(void *ptr)$/;"	f
GetAddress	.\EndpointServer.cpp	/^const char *EndpointServer::GetAddress()$/;"	f	class:EndpointServer
GetBev	.\NetConn.cpp	/^struct bufferevent * NetConn::GetBev()$/;"	f	class:NetConn
GetFd	.\NetConn.cpp	/^socket_t NetConn::GetFd()$/;"	f	class:NetConn
GetInstance	.\CommonClass.h	/^	T* GetInstance()$/;"	f	class:CommonClass
GetPort	.\EndpointServer.cpp	/^int EndpointServer::GetPort()$/;"	f	class:EndpointServer
GetPrefix	.\EndpointServer.cpp	/^int EndpointServer::GetPrefix()$/;"	f	class:EndpointServer
INTERFACE_H	.\interface.h	2;"	d
IO_MAX_MESSAGE_SIZE	.\net_work.c	19;"	d	file:
IO_MAX_MESSAGE_SIZE	.\util.h	11;"	d
Init	.\ServantBase.cpp	/^void ServantBase::Init()$/;"	f	class:ServantBase
InsertServant	.\ServantMgr.cpp	/^void ServantMgr::InsertServant(string servant, class *T)$/;"	f	class:ServantMgr
LOG	.\log.c	/^static struct log_t LOG;$/;"	v	typeref:struct:log_t	file:
LOG_DATE_SIZE	.\log.c	13;"	d	file:
LOG_DEBUG	.\log.c	/^	LOG_DEBUG,$/;"	e	enum:log_level_e	file:
LOG_ERROR	.\log.c	/^	LOG_ERROR,$/;"	e	enum:log_level_e	file:
LOG_H	.\log.h	2;"	d
LOG_INFO	.\log.c	/^	LOG_INFO,$/;"	e	enum:log_level_e	file:
LOG_LEVEL	.\log.c	/^}LOG_LEVEL;$/;"	t	typeref:enum:log_level_e	file:
LOG_MESSAGE_SIZE	.\log.c	12;"	d	file:
LOG_WARN	.\log.c	/^	LOG_WARN,$/;"	e	enum:log_level_e	file:
LoadHandler	.\ServantHandler.cpp	/^void ServantHandler::LoadHandler()$/;"	f	class:ServantHandler
MALLOC_H_	.\malloc.h	2;"	d
MASTERDBINFO_H	.\MasterDbInfo.h	2;"	d
MAX_CONNECT	.\net_work.c	20;"	d	file:
MAX_ENDPOINT_COUNT	.\server_env.c	12;"	d	file:
MAX_SERVER	.\NetWork.hpp	18;"	d
MEMORY	.\Memory.hpp	2;"	d
MESSAGEQUEUE_H	.\MessageDispatch.hpp	2;"	d
MESSAGE_LEN_SIZE	.\net_work.c	18;"	d	file:
MESSAGE_LEN_SIZE	.\util.h	13;"	d
MQ_H	.\mq.h	2;"	d
Malloc	.\malloc.c	/^void *Malloc(size_t size)$/;"	f
MasterDbInfo	.\MasterDbInfo.h	/^	MasterDbInfo() {}$/;"	f	class:MasterDbInfo
MasterDbInfo	.\MasterDbInfo.h	/^class MasterDbInfo$/;"	c
MessageDispatch	.\MessageDispatch.cpp	/^MessageDispatch::MessageDispatch()$/;"	f	class:MessageDispatch
MessageDispatch	.\MessageDispatch.hpp	/^class MessageDispatch$/;"	c
NETCONN_H	.\NetConn.hpp	3;"	d
NETWORK_HPP	.\NetWork.hpp	2;"	d
NETWROK_H	.\net_work.h	2;"	d
NEW	.\Memory.hpp	4;"	d
NetConn	.\NetConn.cpp	/^NetConn::NetConn(struct bufferevent *Bev, socket_t Fd)$/;"	f	class:NetConn
NetConn	.\NetConn.cpp	/^NetConn::NetConn(struct bufferevent *Bev, socket_t Fd, int Prefix)$/;"	f	class:NetConn
NetConn	.\NetConn.hpp	/^class NetConn$/;"	c
NetWork	.\NetWork.cpp	/^NetWork::NetWork(struct server_config_t *sc)$/;"	f	class:NetWork
NetWork	.\NetWork.hpp	/^class NetWork$/;"	c
OnClientClose	.\NetWork.cpp	/^void NetWork::OnClientClose(socket_t fd, void *userdata)$/;"	f	class:NetWork
OnServerConnected	.\NetWork.cpp	/^void NetWork::OnServerConnected(socket_t fd, void *userdata)$/;"	f	class:NetWork
Q	.\mq.c	/^struct global_queue *Q = NULL;$/;"	v	typeref:struct:global_queue
REGISTER_SERVANT	.\interface.h	4;"	d
RealseServant	.\ServantMgr.cpp	/^void ServantMgr::RealseServant()$/;"	f	class:ServantMgr
ReleaseHandler	.\ServantHandler.cpp	/^void ServantHandler::ReleaseHandler()$/;"	f	class:ServantHandler
RunHandlerByServant	.\ServantHandler.cpp	/^bool ServantHandler::RunHandlerByServant(SERVANT_TYPE servant, std::string msg)$/;"	f	class:ServantHandler
S	.\servant.c	/^static struct servant_t S;$/;"	v	typeref:struct:servant_t	file:
SERVANTBASE_H	.\ServantBase.hpp	2;"	d
SERVANTHANDLER_H	.\ServantHandler.hpp	2;"	d
SERVANT_MASK	.\util.h	12;"	d
SERVANT_MGR	.\ServantMgr.h	2;"	d
SERVANT_SHIFT	.\util.h	9;"	d
SERVANT_SIZE	.\util.h	10;"	d
SERVANT_TYPE	.\ServantHandler.hpp	9;"	d
SERVANT_TYPE	.\net_work.c	21;"	d	file:
SERVANT_TYPE	.\util.h	8;"	d
SERVERSTART_H	.\ServerStart.hpp	2;"	d
SERVER_ENV_H	.\server_env.h	2;"	d
SERVER_IMP_H	.\server_config.h	2;"	d
SERVER_THREAD_H	.\server_thread.h	2;"	d
SPIN_DESTROY	.\spinlock.h	11;"	d
SPIN_INIT	.\spinlock.h	8;"	d
SPIN_LOCK	.\spinlock.h	9;"	d
SPIN_UNLOCK	.\spinlock.h	10;"	d
STR_MAX	.\server_env.c	11;"	d	file:
ServantBase	.\ServantBase.cpp	/^ServantBase::ServantBase()$/;"	f	class:ServantBase
ServantBase	.\ServantBase.hpp	/^class ServantBase$/;"	c
ServantCallBack	.\ServantHandler.cpp	/^void ServantHandler::ServantCallBack(void *userdata, SERVANT_TYPE servant, char *msg)$/;"	f	class:ServantHandler
ServantHandler	.\ServantHandler.cpp	/^ServantHandler::ServantHandler()$/;"	f	class:ServantHandler
ServantHandler	.\ServantHandler.hpp	/^class ServantHandler$/;"	c
ServantList	.\ServantMgr.h	/^	typedef std::map<string, class *> ServantList;$/;"	t	class:ServantMgr
ServantMap	.\ServantHandler.hpp	/^	typedef std::map<SERVANT_TYPE, ServantBase*> ServantMap;$/;"	t	class:ServantHandler
ServantMgr	.\ServantMgr.cpp	/^ServantMgr::ServantMgr()$/;"	f	class:ServantMgr
ServantMgr	.\ServantMgr.h	/^class ServantMgr$/;"	c
ServerStart	.\ServerStart.cpp	/^ServerStart::ServerStart(struct server_config_t *sc)$/;"	f	class:ServerStart
ServerStart	.\ServerStart.hpp	/^class ServerStart$/;"	c
Start	.\MessageDispatch.cpp	/^void MessageDispatch::Start()$/;"	f	class:MessageDispatch
Start	.\NetWork.cpp	/^void NetWork::Start()$/;"	f	class:NetWork
Start	.\ServerStart.cpp	/^void ServerStart::Start()$/;"	f	class:ServerStart
Start	.\TimerMgr.cpp	/^void TimerMgr::Start()$/;"	f	class:TimerMgr
Strdup	.\util.c	/^char * Strdup(char *str)$/;"	f
T	.\timer.c	/^struct timer *T = NULL;$/;"	v	typeref:struct:timer
TF	.\timer.c	/^struct timer_f *TF = NULL;$/;"	v	typeref:struct:timer_f
THREADMUTEX_H	.\ThreadMutex.hpp	2;"	d
TIMERMGR_H	.\TimerMgr.hpp	2;"	d
TIMER_H	.\timer.h	2;"	d
ThreadMutex	.\ThreadMutex.hpp	/^	ThreadMutex()$/;"	f	class:ThreadMutex
ThreadMutex	.\ThreadMutex.hpp	/^class ThreadMutex$/;"	c
TimerMgr	.\TimerMgr.cpp	/^TimerMgr::TimerMgr()$/;"	f	class:TimerMgr
TimerMgr	.\TimerMgr.hpp	/^class TimerMgr$/;"	c
UTIL_H	.\util.h	2;"	d
_SERVANT_H_	.\servant.h	2;"	d
_SPINLOCK_H_	.\spinlock.h	2;"	d
_get_date_buf	.\log.c	/^static void _get_date_buf(char *buf)$/;"	f	file:
_log	.\log.c	/^static void _log(LOG_LEVEL log_level, const char *log_msg)$/;"	f	file:
accepted_cb	.\net_work.c	/^void accepted_cb(struct evconnlistener *listener, socket_t fd,$/;"	f
address	.\EndpointServer.hpp	/^	const char *address;$/;"	m	class:EndpointServer
address	.\NetWork.hpp	/^	char address[MAX_SERVER][24];$/;"	m	class:NetWork
address	.\net_work.c	/^static char address[MAX_CONNECT][24];$/;"	v	file:
address	.\server_config.h	/^	const char *address;$/;"	m	struct:server_config_t
base	.\NetWork.hpp	/^	struct event_base* base;$/;"	m	class:NetWork	typeref:struct:NetWork::event_base
bev	.\NetConn.hpp	/^	struct bufferevent *bev;$/;"	m	class:NetConn	typeref:struct:NetConn::bufferevent
bev	.\mq.h	/^	struct bufferevent *bev;$/;"	m	struct:message_queue	typeref:struct:message_queue::bufferevent
bev	.\net_work.c	/^	struct bufferevent *bev;$/;"	m	struct:socket_internal_t	typeref:struct:socket_internal_t::bufferevent	file:
callback_t	.\net_work.c	/^struct callback_t {$/;"	s	file:
cb	.\servant.c	/^	servant_cb cb;$/;"	m	struct:servant_t	file:
ch_apear_times	.\util.c	/^int ch_apear_times(const char *str, const char c)$/;"	f
client_conn	.\net_work.c	/^static int client_conn = 0;$/;"	v	file:
clientclose	.\net_work.c	/^static callback_t clientclose;$/;"	v	file:
connect_eventcb	.\net_work.c	/^static void connect_eventcb(struct bufferevent *bev, short events, void *userdata)$/;"	f	file:
create_thread	.\server_thread.c	/^void create_thread(pthread_t *thread, void *(*start_routine) (void *), void *arg)$/;"	f
currenttime	.\timer.c	/^	zy_uint64_t currenttime; 	\/\/ 当前时间戳$/;"	m	struct:timer	file:
dbenable	.\server_config.h	/^	int dbenable;$/;"	m	struct:server_config_t
dbhost	.\MasterDbInfo.h	/^	static char *dbhost;$/;"	m	class:MasterDbInfo
dbhost	.\MasterDbInfo.h	/^char *MasterDbInfo::dbhost = NULL;$/;"	m	class:MasterDbInfo
dbname	.\MasterDbInfo.h	/^	static char *dbname;$/;"	m	class:MasterDbInfo
dbname	.\MasterDbInfo.h	/^char *MasterDbInfo::dbname = NULL;$/;"	m	class:MasterDbInfo
dbport	.\MasterDbInfo.h	/^	static int dbport;$/;"	m	class:MasterDbInfo
dbport	.\MasterDbInfo.h	/^int MasterDbInfo::dbport = 0;$/;"	m	class:MasterDbInfo
dbpwd	.\MasterDbInfo.h	/^	static char *dbpwd;$/;"	m	class:MasterDbInfo
dbpwd	.\MasterDbInfo.h	/^char *MasterDbInfo::dbpwd = NULL;$/;"	m	class:MasterDbInfo
dbuser	.\MasterDbInfo.h	/^	static char *dbuser;$/;"	m	class:MasterDbInfo
dbuser	.\MasterDbInfo.h	/^char *MasterDbInfo::dbuser = NULL;$/;"	m	class:MasterDbInfo
endpointServerList	.\NetWork.hpp	/^	std::list<EndpointServer> endpointServerList;$/;"	m	class:NetWork
endpointlist	.\server_config.h	/^	const char *endpointlist;$/;"	m	struct:server_config_t
env_index	.\server_env.c	/^static int env_index = 0;$/;"	v	file:
env_init	.\server_env.c	/^void env_init(const char *machine_conf, const char *config)$/;"	f
event_cb	.\net_work.c	/^static void event_cb(struct bufferevent *bev, short events, void *userdata)$/;"	f	file:
exit_thread	.\server_thread.c	/^void exit_thread()$/;"	f
fd	.\NetConn.hpp	/^	socket_t fd;$/;"	m	class:NetConn
fd	.\net_work.c	/^	socket_t fd;$/;"	m	struct:socket_internal_t	file:
func	.\timer.c	/^	timer_execute_func func;$/;"	m	struct:timer_f	file:
get_client_conn	.\net_work.c	/^int get_client_conn()$/;"	f
get_currenttime	.\timer.c	/^zy_uint64_t get_currenttime()$/;"	f
get_env_value	.\server_env.c	/^char * get_env_value(char *key, char *def_value)$/;"	f
get_server_config	.\server_config.c	/^struct server_config_t * get_server_config()$/;"	f
get_server_conn	.\net_work.c	/^int get_server_conn()$/;"	f
get_starttime	.\timer.c	/^zy_uint64_t get_starttime()$/;"	f
global_mq_init	.\mq.c	/^void global_mq_init()$/;"	f
global_queue	.\mq.h	/^struct global_queue {$/;"	s
head	.\mq.h	/^	struct message_queue *head;$/;"	m	struct:global_queue	typeref:struct:global_queue::message_queue
init_server_config	.\server_config.c	/^void init_server_config(const char *address, int port, int prefix, const char *logpath, const char *endpointlist, int thread, int dbenable)$/;"	f
interval_time	.\timer.c	/^	zy_uint32_t interval_time; 		\/\/ 间隔多少时间执行一次$/;"	m	struct:timer_f	file:
key	.\server_env.c	/^	char key[128];$/;"	m	struct:server_env	file:
last_call_time	.\timer.c	/^	zy_uint32_t last_call_time; 	\/\/ 上一次执行时间;$/;"	m	struct:timer_f	file:
len	.\mq.h	/^	int len;$/;"	m	struct:message_queue
lock	.\log.c	/^	struct spinlock lock;$/;"	m	struct:log_t	typeref:struct:log_t::spinlock	file:
lock	.\mq.h	/^	struct spinlock lock;$/;"	m	struct:global_queue	typeref:struct:global_queue::spinlock
lock	.\mq.h	/^	struct spinlock lock;$/;"	m	struct:message_queue	typeref:struct:message_queue::spinlock
lock	.\spinlock.h	/^	int lock;$/;"	m	struct:spinlock
lock	.\spinlock.h	/^	pthread_mutex_t lock;$/;"	m	struct:spinlock
log_debug	.\log.c	/^void log_debug(const char *fmt, ...)$/;"	f
log_error	.\log.c	/^void log_error(const char *fmt, ...)$/;"	f
log_fp	.\log.c	/^	FILE *log_fp;$/;"	m	struct:log_t	file:
log_info	.\log.c	/^void log_info(const char *fmt, ...)$/;"	f
log_init	.\log.c	/^void log_init(const char *logpath)$/;"	f
log_level_e	.\log.c	/^typedef enum log_level_e {$/;"	g	file:
log_release	.\log.c	/^void log_release()$/;"	f
log_t	.\log.c	/^struct log_t {$/;"	s	file:
log_warn	.\log.c	/^void log_warn(const char *fmt, ...)$/;"	f
logpath	.\log.c	/^	const char *logpath;$/;"	m	struct:log_t	file:
logpath	.\server_config.h	/^	const char *logpath;$/;"	m	struct:server_config_t
m_pInstance	.\CommonClass.h	/^	T* m_pInstance;$/;"	m	class:CommonClass
main	.\server_main.cpp	/^int main(int argc, char *argv[])$/;"	f
message_queue	.\mq.h	/^struct message_queue {$/;"	s
mq_create	.\mq.c	/^static struct message_queue * mq_create(struct bufferevent *bev, char *msg)$/;"	f	file:
mq_dispatch	.\mq.c	/^void mq_dispatch() $/;"	f
mq_pop	.\mq.c	/^struct message_queue *mq_pop()$/;"	f
mq_push	.\mq.c	/^void mq_push(struct bufferevent *bev, char *msg)$/;"	f
mq_release	.\mq.c	/^void mq_release(struct message_queue *mq)$/;"	f
msg	.\mq.h	/^	char *msg;$/;"	m	struct:message_queue
mutex	.\ThreadMutex.hpp	/^	pthread_mutex_t mutex;$/;"	m	class:ThreadMutex
net_work_callback	.\net_work.h	/^typedef void (*net_work_callback)(socket_t, void *);$/;"	t
net_work_connect	.\net_work.c	/^void net_work_connect(const char *endpointlist)$/;"	f
net_work_init	.\net_work.c	/^void net_work_init()$/;"	f
net_work_reg_onclientclose	.\net_work.c	/^void net_work_reg_onclientclose(net_work_callback onclientclose_cb, void *userdata)$/;"	f
net_work_reg_onserverconnected	.\net_work.c	/^void net_work_reg_onserverconnected(net_work_callback onserverconnected_cb, void *userdata)$/;"	f
net_work_run	.\net_work.c	/^void net_work_run(const char *address, int port, const char *endpointlist, int prefix)$/;"	f
next	.\mq.h	/^	struct message_queue *next;$/;"	m	struct:message_queue	typeref:struct:message_queue::message_queue
next	.\timer.c	/^	struct timer_f *next;$/;"	m	struct:timer_f	typeref:struct:timer_f::timer_f	file:
nw_cb	.\net_work.c	/^	net_work_callback nw_cb;$/;"	m	struct:callback_t	file:
pack	.\util.c	/^void pack(char *dest, int len, SERVANT_TYPE servant, char *message)$/;"	f
param	.\net_work.c	/^	void *param;$/;"	m	struct:callback_t	file:
port	.\EndpointServer.hpp	/^	int port;$/;"	m	class:EndpointServer
port	.\NetWork.hpp	/^	char port[MAX_SERVER][8];$/;"	m	class:NetWork
port	.\net_work.c	/^static char port[MAX_CONNECT][8];$/;"	v	file:
port	.\server_config.h	/^	int port;$/;"	m	struct:server_config_t
prefix	.\EndpointServer.hpp	/^	int prefix;$/;"	m	class:EndpointServer
prefix	.\NetConn.hpp	/^	int prefix;$/;"	m	class:NetConn
prefix	.\NetWork.hpp	/^	char prefix[MAX_SERVER][7];$/;"	m	class:NetWork
prefix	.\net_work.c	/^static char prefix[MAX_CONNECT][10];$/;"	v	file:
prefix	.\server_config.h	/^	int prefix;$/;"	m	struct:server_config_t
px	.\net_work.c	/^SERVANT_TYPE px[MAX_CONNECT];$/;"	v
read_cb	.\net_work.c	/^void read_cb(struct bufferevent *bev, void *userdata)$/;"	f
read_helper	.\net_work.c	/^void read_helper(struct bufferevent *bev)$/;"	f
run_thread	.\net_work.c	/^void *run_thread(void *userdata)$/;"	f
self_servant_prefix	.\net_work.c	/^SERVANT_TYPE self_servant_prefix = 0;$/;"	v
servantList	.\ServantMgr.h	/^	ServantList servantList;$/;"	m	class:ServantMgr
servantMap	.\ServantHandler.hpp	/^	ServantMap servantMap;$/;"	m	class:ServantHandler
servant_cb	.\servant.h	/^typedef void (*servant_cb)(void *userdata, SERVANT_TYPE servant, char *msg);$/;"	t
servant_dispatch	.\servant.c	/^void servant_dispatch(struct message_queue *mq)$/;"	f
servant_init	.\servant.c	/^static bool servant_init = false; 	\/\/ 注册完回调之后则认为初始化成功$/;"	v	file:
servant_prefix	.\net_work.c	/^	SERVANT_TYPE servant_prefix;$/;"	m	struct:socket_internal_t	file:
servant_reg_callback	.\servant.c	/^void servant_reg_callback(servant_cb cb, void *userdata)$/;"	f
servant_t	.\servant.c	/^struct servant_t {$/;"	s	file:
server_config	.\NetWork.hpp	/^	struct server_config_t *server_config;$/;"	m	class:NetWork	typeref:struct:NetWork::server_config_t
server_config	.\ServerStart.hpp	/^	struct server_config_t *server_config;$/;"	m	class:ServerStart	typeref:struct:ServerStart::server_config_t
server_config	.\server_config.c	/^static server_config_t server_config;$/;"	v	file:
server_config_t	.\server_config.h	/^struct server_config_t {$/;"	s
server_conn	.\net_work.c	/^static int server_conn = 0;$/;"	v	file:
server_env	.\server_env.c	/^struct server_env {$/;"	s	file:
serverconnected	.\net_work.c	/^static callback_t serverconnected;$/;"	v	file:
set_tcp_no_delay	.\net_work.c	/^static void set_tcp_no_delay(socket_t fd)$/;"	f	file:
sin	.\NetWork.hpp	/^	struct sockaddr_in sin[MAX_SERVER]; $/;"	m	class:NetWork	typeref:struct:NetWork::sockaddr_in
sin	.\net_work.c	/^static struct sockaddr_in sin[MAX_CONNECT];$/;"	v	typeref:struct:sockaddr_in	file:
socket_internal_t	.\net_work.c	/^struct socket_internal_t {$/;"	s	file:
socket_t	.\NetConn.hpp	8;"	d
socket_t	.\net_work.h	18;"	d
spinlock	.\spinlock.h	/^struct spinlock {$/;"	s
spinlock_destroy	.\spinlock.h	/^spinlock_destroy(struct spinlock *lock) {$/;"	f
spinlock_init	.\spinlock.h	/^spinlock_init(struct spinlock *lock) {$/;"	f
spinlock_lock	.\spinlock.h	/^spinlock_lock(struct spinlock *lock) {$/;"	f
spinlock_trylock	.\spinlock.h	/^spinlock_trylock(struct spinlock *lock) {$/;"	f
spinlock_unlock	.\spinlock.h	/^spinlock_unlock(struct spinlock *lock) {$/;"	f
starttime	.\timer.c	/^	zy_uint64_t starttime; 	\/\/ 启动时的时间戳$/;"	m	struct:timer	file:
str_all_space	.\util.c	/^int str_all_space(char *str)$/;"	f
str_split	.\util.c	/^void str_split(const char *str, char *left, char *right, const char c)$/;"	f
str_trim	.\util.c	/^void str_trim(char *str)$/;"	f
str_trim_special_ch	.\util.c	/^void str_trim_special_ch(char *str, const char c)$/;"	f
tail	.\mq.h	/^	struct message_queue *tail;$/;"	m	struct:global_queue	typeref:struct:global_queue::message_queue
thread	.\server_config.h	/^	int thread;$/;"	m	struct:server_config_t
timer	.\timer.c	/^struct timer {$/;"	s	file:
timer_execute_func	.\timer.h	/^typedef void (*timer_execute_func)(void);$/;"	t
timer_f	.\timer.c	/^struct timer_f {$/;"	s	file:
timer_init	.\timer.c	/^void timer_init()$/;"	f
timer_register	.\timer.c	/^void timer_register(timer_execute_func func, int interval_time)$/;"	f
timer_release	.\timer.c	/^void timer_release()$/;"	f
timer_update	.\timer.c	/^void timer_update()$/;"	f
trim_crlf	.\util.c	/^void trim_crlf(char *str)$/;"	f
userdata	.\servant.c	/^	void *userdata;$/;"	m	struct:servant_t	file:
value	.\server_env.c	/^	char value[128];$/;"	m	struct:server_env	file:
zy_evutil_vsnprintf	.\log.c	11;"	d	file:
zy_gettimeofday	.\timer.c	9;"	d	file:
zy_uint32_t	.\timer.c	8;"	d	file:
zy_uint64_t	.\timer.c	7;"	d	file:
~EndpointServer	.\EndpointServer.cpp	/^EndpointServer::~EndpointServer()$/;"	f	class:EndpointServer
~MessageDispatch	.\MessageDispatch.cpp	/^MessageDispatch::~MessageDispatch()$/;"	f	class:MessageDispatch
~NetConn	.\NetConn.cpp	/^NetConn::~NetConn()$/;"	f	class:NetConn
~NetWork	.\NetWork.cpp	/^NetWork::~NetWork()$/;"	f	class:NetWork
~ServantBase	.\ServantBase.cpp	/^ServantBase::~ServantBase()$/;"	f	class:ServantBase
~ServantHandler	.\ServantHandler.cpp	/^ServantHandler::~ServantHandler()$/;"	f	class:ServantHandler
~ThreadMutex	.\ThreadMutex.hpp	/^	~ThreadMutex()$/;"	f	class:ThreadMutex
~TimerMgr	.\TimerMgr.cpp	/^TimerMgr::~TimerMgr()$/;"	f	class:TimerMgr
