#ifndef REFLECTION_READER_H
#define REFLECTION_READER_H

/* Generated by flatcc 0.4.0 FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#ifndef alignas
#include <stdalign.h>
#endif
#define PDIAGNOSTIC_IGNORE_UNUSED
#include "flatcc/portable/pdiagnostic_push.h"
#undef flatbuffers_identifier
#define flatbuffers_identifier "BFBS"
#undef flatbuffers_extension
#define flatbuffers_extension ".bfbs"


typedef const struct reflection_Type_table *reflection_Type_table_t;
typedef const flatbuffers_uoffset_t *reflection_Type_vec_t;
typedef flatbuffers_uoffset_t *reflection_Type_mutable_vec_t;
typedef const struct reflection_EnumVal_table *reflection_EnumVal_table_t;
typedef const flatbuffers_uoffset_t *reflection_EnumVal_vec_t;
typedef flatbuffers_uoffset_t *reflection_EnumVal_mutable_vec_t;
typedef const struct reflection_Enum_table *reflection_Enum_table_t;
typedef const flatbuffers_uoffset_t *reflection_Enum_vec_t;
typedef flatbuffers_uoffset_t *reflection_Enum_mutable_vec_t;
typedef const struct reflection_Field_table *reflection_Field_table_t;
typedef const flatbuffers_uoffset_t *reflection_Field_vec_t;
typedef flatbuffers_uoffset_t *reflection_Field_mutable_vec_t;
typedef const struct reflection_Object_table *reflection_Object_table_t;
typedef const flatbuffers_uoffset_t *reflection_Object_vec_t;
typedef flatbuffers_uoffset_t *reflection_Object_mutable_vec_t;
typedef const struct reflection_Schema_table *reflection_Schema_table_t;
typedef const flatbuffers_uoffset_t *reflection_Schema_vec_t;
typedef flatbuffers_uoffset_t *reflection_Schema_mutable_vec_t;

typedef int8_t reflection_BaseType_enum_t;
__flatbuffers_define_integer_type(reflection_BaseType, reflection_BaseType_enum_t, 8)
#define reflection_BaseType_None ((reflection_BaseType_enum_t)0)
#define reflection_BaseType_UType ((reflection_BaseType_enum_t)1)
#define reflection_BaseType_Bool ((reflection_BaseType_enum_t)2)
#define reflection_BaseType_Byte ((reflection_BaseType_enum_t)3)
#define reflection_BaseType_UByte ((reflection_BaseType_enum_t)4)
#define reflection_BaseType_Short ((reflection_BaseType_enum_t)5)
#define reflection_BaseType_UShort ((reflection_BaseType_enum_t)6)
#define reflection_BaseType_Int ((reflection_BaseType_enum_t)7)
#define reflection_BaseType_UInt ((reflection_BaseType_enum_t)8)
#define reflection_BaseType_Long ((reflection_BaseType_enum_t)9)
#define reflection_BaseType_ULong ((reflection_BaseType_enum_t)10)
#define reflection_BaseType_Float ((reflection_BaseType_enum_t)11)
#define reflection_BaseType_Double ((reflection_BaseType_enum_t)12)
#define reflection_BaseType_String ((reflection_BaseType_enum_t)13)
#define reflection_BaseType_Vector ((reflection_BaseType_enum_t)14)
#define reflection_BaseType_Obj ((reflection_BaseType_enum_t)15)
#define reflection_BaseType_Union ((reflection_BaseType_enum_t)16)

static inline const char *reflection_BaseType_name(reflection_BaseType_enum_t value)
{
    switch (value) {
    case reflection_BaseType_None: return "None";
    case reflection_BaseType_UType: return "UType";
    case reflection_BaseType_Bool: return "Bool";
    case reflection_BaseType_Byte: return "Byte";
    case reflection_BaseType_UByte: return "UByte";
    case reflection_BaseType_Short: return "Short";
    case reflection_BaseType_UShort: return "UShort";
    case reflection_BaseType_Int: return "Int";
    case reflection_BaseType_UInt: return "UInt";
    case reflection_BaseType_Long: return "Long";
    case reflection_BaseType_ULong: return "ULong";
    case reflection_BaseType_Float: return "Float";
    case reflection_BaseType_Double: return "Double";
    case reflection_BaseType_String: return "String";
    case reflection_BaseType_Vector: return "Vector";
    case reflection_BaseType_Obj: return "Obj";
    case reflection_BaseType_Union: return "Union";
    default: return "";
    }
}



struct reflection_Type_table { uint8_t unused__; };

#ifndef reflection_Type_identifier
#define reflection_Type_identifier flatbuffers_identifier
#endif
#define reflection_Type_type_hash ((flatbuffers_thash_t)0x44c8fe5e)
#define reflection_Type_type_identifier "\x5e\xfe\xc8\x44"
static inline size_t reflection_Type_vec_len(reflection_Type_vec_t vec)
__flatbuffers_vec_len(vec)
static inline reflection_Type_table_t reflection_Type_vec_at(reflection_Type_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(reflection_Type_table_t, vec, i, 0)
__flatbuffers_table_as_root(reflection_Type)

static inline reflection_BaseType_enum_t reflection_Type_base_type(reflection_Type_table_t t)
__flatbuffers_scalar_field(reflection_BaseType, 0, 0, t)
static inline int reflection_Type_base_type_is_present(reflection_Type_table_t t)
__flatbuffers_field_present(0, t)

static inline reflection_BaseType_enum_t reflection_Type_element(reflection_Type_table_t t)
__flatbuffers_scalar_field(reflection_BaseType, 1, 0, t)
static inline int reflection_Type_element_is_present(reflection_Type_table_t t)
__flatbuffers_field_present(1, t)

static inline int32_t reflection_Type_index(reflection_Type_table_t t)
__flatbuffers_scalar_field(flatbuffers_int32, 2, -1, t)
static inline int reflection_Type_index_is_present(reflection_Type_table_t t)
__flatbuffers_field_present(2, t)


struct reflection_EnumVal_table { uint8_t unused__; };

#ifndef reflection_EnumVal_identifier
#define reflection_EnumVal_identifier flatbuffers_identifier
#endif
#define reflection_EnumVal_type_hash ((flatbuffers_thash_t)0x9531c946)
#define reflection_EnumVal_type_identifier "\x46\xc9\x31\x95"
static inline size_t reflection_EnumVal_vec_len(reflection_EnumVal_vec_t vec)
__flatbuffers_vec_len(vec)
static inline reflection_EnumVal_table_t reflection_EnumVal_vec_at(reflection_EnumVal_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(reflection_EnumVal_table_t, vec, i, 0)
__flatbuffers_table_as_root(reflection_EnumVal)

static inline flatbuffers_string_t reflection_EnumVal_name(reflection_EnumVal_table_t t)
__flatbuffers_vector_field(flatbuffers_string_t, 0, t, 1)
static inline int reflection_EnumVal_name_is_present(reflection_EnumVal_table_t t)
__flatbuffers_field_present(0, t)

static inline int64_t reflection_EnumVal_value(reflection_EnumVal_table_t t)
__flatbuffers_scalar_field(flatbuffers_int64, 1, 0, t)
/* Note: find only works on vectors sorted by this field. */
__flatbuffers_define_find_by_scalar_field(reflection_EnumVal, value, int64_t)
__flatbuffers_define_sort_by_scalar_field(reflection_EnumVal, value, int64_t, flatbuffers_uoffset_t)
#define reflection_EnumVal_vec_find reflection_EnumVal_vec_find_by_value
#define reflection_EnumVal_vec_sort reflection_EnumVal_vec_sort_by_value
static inline int reflection_EnumVal_value_is_present(reflection_EnumVal_table_t t)
__flatbuffers_field_present(1, t)

static inline reflection_Object_table_t reflection_EnumVal_object(reflection_EnumVal_table_t t)
__flatbuffers_table_field(reflection_Object_table_t, 2, t, 0)
static inline int reflection_EnumVal_object_is_present(reflection_EnumVal_table_t t)
__flatbuffers_field_present(2, t)


struct reflection_Enum_table { uint8_t unused__; };

#ifndef reflection_Enum_identifier
#define reflection_Enum_identifier flatbuffers_identifier
#endif
#define reflection_Enum_type_hash ((flatbuffers_thash_t)0xacffa90f)
#define reflection_Enum_type_identifier "\x0f\xa9\xff\xac"
static inline size_t reflection_Enum_vec_len(reflection_Enum_vec_t vec)
__flatbuffers_vec_len(vec)
static inline reflection_Enum_table_t reflection_Enum_vec_at(reflection_Enum_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(reflection_Enum_table_t, vec, i, 0)
__flatbuffers_table_as_root(reflection_Enum)

static inline flatbuffers_string_t reflection_Enum_name(reflection_Enum_table_t t)
__flatbuffers_vector_field(flatbuffers_string_t, 0, t, 1)
/* Note: find only works on vectors sorted by this field. */
static inline size_t reflection_Enum_vec_find_by_name(reflection_Enum_vec_t vec, const char *s)
__flatbuffers_find_by_string_field(reflection_Enum_name, vec, reflection_Enum_vec_at, reflection_Enum_vec_len, s)
static inline size_t reflection_Enum_vec_find_n_by_name(reflection_Enum_vec_t vec, const char *s, int n)
__flatbuffers_find_by_string_n_field(reflection_Enum_name, vec, reflection_Enum_vec_at, reflection_Enum_vec_len, s, n)
__flatbuffers_define_sort_by_string_field(reflection_Enum, name)
#define reflection_Enum_vec_find reflection_Enum_vec_find_by_name
#define reflection_Enum_vec_find_n reflection_Enum_vec_find_n_by_name
#define reflection_Enum_vec_sort reflection_Enum_vec_sort_by_name
static inline int reflection_Enum_name_is_present(reflection_Enum_table_t t)
__flatbuffers_field_present(0, t)

static inline reflection_EnumVal_vec_t reflection_Enum_values(reflection_Enum_table_t t)
__flatbuffers_vector_field(reflection_EnumVal_vec_t, 1, t, 1)
static inline int reflection_Enum_values_is_present(reflection_Enum_table_t t)
__flatbuffers_field_present(1, t)

static inline flatbuffers_bool_t reflection_Enum_is_union(reflection_Enum_table_t t)
__flatbuffers_scalar_field(flatbuffers_bool, 2, 0, t)
static inline int reflection_Enum_is_union_is_present(reflection_Enum_table_t t)
__flatbuffers_field_present(2, t)

static inline reflection_Type_table_t reflection_Enum_underlying_type(reflection_Enum_table_t t)
__flatbuffers_table_field(reflection_Type_table_t, 3, t, 1)
static inline int reflection_Enum_underlying_type_is_present(reflection_Enum_table_t t)
__flatbuffers_field_present(3, t)


struct reflection_Field_table { uint8_t unused__; };

#ifndef reflection_Field_identifier
#define reflection_Field_identifier flatbuffers_identifier
#endif
#define reflection_Field_type_hash ((flatbuffers_thash_t)0x9f7e408a)
#define reflection_Field_type_identifier "\x8a\x40\x7e\x9f"
static inline size_t reflection_Field_vec_len(reflection_Field_vec_t vec)
__flatbuffers_vec_len(vec)
static inline reflection_Field_table_t reflection_Field_vec_at(reflection_Field_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(reflection_Field_table_t, vec, i, 0)
__flatbuffers_table_as_root(reflection_Field)

static inline flatbuffers_string_t reflection_Field_name(reflection_Field_table_t t)
__flatbuffers_vector_field(flatbuffers_string_t, 0, t, 1)
/* Note: find only works on vectors sorted by this field. */
static inline size_t reflection_Field_vec_find_by_name(reflection_Field_vec_t vec, const char *s)
__flatbuffers_find_by_string_field(reflection_Field_name, vec, reflection_Field_vec_at, reflection_Field_vec_len, s)
static inline size_t reflection_Field_vec_find_n_by_name(reflection_Field_vec_t vec, const char *s, int n)
__flatbuffers_find_by_string_n_field(reflection_Field_name, vec, reflection_Field_vec_at, reflection_Field_vec_len, s, n)
__flatbuffers_define_sort_by_string_field(reflection_Field, name)
#define reflection_Field_vec_find reflection_Field_vec_find_by_name
#define reflection_Field_vec_find_n reflection_Field_vec_find_n_by_name
#define reflection_Field_vec_sort reflection_Field_vec_sort_by_name
static inline int reflection_Field_name_is_present(reflection_Field_table_t t)
__flatbuffers_field_present(0, t)

static inline reflection_Type_table_t reflection_Field_type(reflection_Field_table_t t)
__flatbuffers_table_field(reflection_Type_table_t, 1, t, 1)
static inline int reflection_Field_type_is_present(reflection_Field_table_t t)
__flatbuffers_field_present(1, t)

static inline uint16_t reflection_Field_id(reflection_Field_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint16, 2, 0, t)
static inline int reflection_Field_id_is_present(reflection_Field_table_t t)
__flatbuffers_field_present(2, t)

static inline uint16_t reflection_Field_offset(reflection_Field_table_t t)
__flatbuffers_scalar_field(flatbuffers_uint16, 3, 0, t)
static inline int reflection_Field_offset_is_present(reflection_Field_table_t t)
__flatbuffers_field_present(3, t)

static inline int64_t reflection_Field_default_integer(reflection_Field_table_t t)
__flatbuffers_scalar_field(flatbuffers_int64, 4, 0, t)
static inline int reflection_Field_default_integer_is_present(reflection_Field_table_t t)
__flatbuffers_field_present(4, t)

static inline double reflection_Field_default_real(reflection_Field_table_t t)
__flatbuffers_scalar_field(flatbuffers_double, 5, 0.000000, t)
static inline int reflection_Field_default_real_is_present(reflection_Field_table_t t)
__flatbuffers_field_present(5, t)

static inline flatbuffers_bool_t reflection_Field_deprecated(reflection_Field_table_t t)
__flatbuffers_scalar_field(flatbuffers_bool, 6, 0, t)
static inline int reflection_Field_deprecated_is_present(reflection_Field_table_t t)
__flatbuffers_field_present(6, t)

static inline flatbuffers_bool_t reflection_Field_required(reflection_Field_table_t t)
__flatbuffers_scalar_field(flatbuffers_bool, 7, 0, t)
static inline int reflection_Field_required_is_present(reflection_Field_table_t t)
__flatbuffers_field_present(7, t)

static inline flatbuffers_bool_t reflection_Field_key(reflection_Field_table_t t)
__flatbuffers_scalar_field(flatbuffers_bool, 8, 0, t)
static inline int reflection_Field_key_is_present(reflection_Field_table_t t)
__flatbuffers_field_present(8, t)


struct reflection_Object_table { uint8_t unused__; };

#ifndef reflection_Object_identifier
#define reflection_Object_identifier flatbuffers_identifier
#endif
#define reflection_Object_type_hash ((flatbuffers_thash_t)0xb09729bd)
#define reflection_Object_type_identifier "\xbd\x29\x97\xb0"
static inline size_t reflection_Object_vec_len(reflection_Object_vec_t vec)
__flatbuffers_vec_len(vec)
static inline reflection_Object_table_t reflection_Object_vec_at(reflection_Object_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(reflection_Object_table_t, vec, i, 0)
__flatbuffers_table_as_root(reflection_Object)

static inline flatbuffers_string_t reflection_Object_name(reflection_Object_table_t t)
__flatbuffers_vector_field(flatbuffers_string_t, 0, t, 1)
/* Note: find only works on vectors sorted by this field. */
static inline size_t reflection_Object_vec_find_by_name(reflection_Object_vec_t vec, const char *s)
__flatbuffers_find_by_string_field(reflection_Object_name, vec, reflection_Object_vec_at, reflection_Object_vec_len, s)
static inline size_t reflection_Object_vec_find_n_by_name(reflection_Object_vec_t vec, const char *s, int n)
__flatbuffers_find_by_string_n_field(reflection_Object_name, vec, reflection_Object_vec_at, reflection_Object_vec_len, s, n)
__flatbuffers_define_sort_by_string_field(reflection_Object, name)
#define reflection_Object_vec_find reflection_Object_vec_find_by_name
#define reflection_Object_vec_find_n reflection_Object_vec_find_n_by_name
#define reflection_Object_vec_sort reflection_Object_vec_sort_by_name
static inline int reflection_Object_name_is_present(reflection_Object_table_t t)
__flatbuffers_field_present(0, t)

static inline reflection_Field_vec_t reflection_Object_fields(reflection_Object_table_t t)
__flatbuffers_vector_field(reflection_Field_vec_t, 1, t, 1)
static inline int reflection_Object_fields_is_present(reflection_Object_table_t t)
__flatbuffers_field_present(1, t)

static inline flatbuffers_bool_t reflection_Object_is_struct(reflection_Object_table_t t)
__flatbuffers_scalar_field(flatbuffers_bool, 2, 0, t)
static inline int reflection_Object_is_struct_is_present(reflection_Object_table_t t)
__flatbuffers_field_present(2, t)

static inline int32_t reflection_Object_minalign(reflection_Object_table_t t)
__flatbuffers_scalar_field(flatbuffers_int32, 3, 0, t)
static inline int reflection_Object_minalign_is_present(reflection_Object_table_t t)
__flatbuffers_field_present(3, t)

static inline int32_t reflection_Object_bytesize(reflection_Object_table_t t)
__flatbuffers_scalar_field(flatbuffers_int32, 4, 0, t)
static inline int reflection_Object_bytesize_is_present(reflection_Object_table_t t)
__flatbuffers_field_present(4, t)


struct reflection_Schema_table { uint8_t unused__; };

#ifndef reflection_Schema_identifier
#define reflection_Schema_identifier flatbuffers_identifier
#endif
#define reflection_Schema_type_hash ((flatbuffers_thash_t)0xfaf93779)
#define reflection_Schema_type_identifier "\x79\x37\xf9\xfa"
static inline size_t reflection_Schema_vec_len(reflection_Schema_vec_t vec)
__flatbuffers_vec_len(vec)
static inline reflection_Schema_table_t reflection_Schema_vec_at(reflection_Schema_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(reflection_Schema_table_t, vec, i, 0)
__flatbuffers_table_as_root(reflection_Schema)

static inline reflection_Object_vec_t reflection_Schema_objects(reflection_Schema_table_t t)
__flatbuffers_vector_field(reflection_Object_vec_t, 0, t, 1)
static inline int reflection_Schema_objects_is_present(reflection_Schema_table_t t)
__flatbuffers_field_present(0, t)

static inline reflection_Enum_vec_t reflection_Schema_enums(reflection_Schema_table_t t)
__flatbuffers_vector_field(reflection_Enum_vec_t, 1, t, 1)
static inline int reflection_Schema_enums_is_present(reflection_Schema_table_t t)
__flatbuffers_field_present(1, t)

static inline flatbuffers_string_t reflection_Schema_file_ident(reflection_Schema_table_t t)
__flatbuffers_vector_field(flatbuffers_string_t, 2, t, 0)
static inline int reflection_Schema_file_ident_is_present(reflection_Schema_table_t t)
__flatbuffers_field_present(2, t)

static inline flatbuffers_string_t reflection_Schema_file_ext(reflection_Schema_table_t t)
__flatbuffers_vector_field(flatbuffers_string_t, 3, t, 0)
static inline int reflection_Schema_file_ext_is_present(reflection_Schema_table_t t)
__flatbuffers_field_present(3, t)

static inline reflection_Object_table_t reflection_Schema_root_table(reflection_Schema_table_t t)
__flatbuffers_table_field(reflection_Object_table_t, 4, t, 0)
static inline int reflection_Schema_root_table_is_present(reflection_Schema_table_t t)
__flatbuffers_field_present(4, t)


#include "flatcc/portable/pdiagnostic_pop.h"
#endif /* REFLECTION_READER_H */
